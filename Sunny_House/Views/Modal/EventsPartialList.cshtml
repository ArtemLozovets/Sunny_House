@model PagedList.IPagedList<Sunny_House.Models.Event>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.First().EventName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.First().StartTime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.First().EndTime)
        </th>
        <th>
            <label>Ответственный</label>
        </th>
        <th></th>
    </tr>


    @if (Model.Count() == 0)
    {
        <tr>
            <td colspan="4">
                <p class="text-center text-danger" style="margin-top:12px;">Записи, соответствующие критериям поиска, не найдены<p>
            </td>
        </tr>
    }

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.EventName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.StartTime)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.EndTime)
        </td>
        <td>
            @item.Person.FirstName @item.Person.LastName @item.Person.MiddleName
        </td>
        <td>
            <a class="btn btn-default btn-sm selEvent"
               data-eventid="@item.EventId"
               onclick="selsubmit(this)"
               data-eventname="@item.EventName">
                <span class="glyphicon glyphicon-ok"></span>
            </a>
        </td>
    </tr>
}

</table>

<hr />
Страница @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) из @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("EventsPartialList", "Modal",
                                     new
                                     {
                                         ExerciseSearchString = @ViewData["EventsSearchString"],
                                         StartTimeS = @ViewData["StartTimeS"],
                                         EndTimeS = @ViewData["EndTimeS"],
                                         FilterVisitor = @ViewBag.FilterVisitor,
                                         FilterEx = ViewBag.FilterEx,
                                         FilterDate = ViewBag.FilterDate,
                                         page
                                     }),
                             PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new PagedListRenderOptions { Display = PagedListDisplayMode.IfNeeded },
                             new AjaxOptions() { HttpMethod = "POST", UpdateTargetId = "update" }))
