@model PagedList.IPagedList<Sunny_House.Models.Visit>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

<style type="text/css">
    .red_tr {
        background-color: #ffcccc !important;
    }

        .red_tr:hover {
            background-color: #ffaaaa !important;
        }
</style>

<label id="SortColumn" hidden>@ViewData["SortColumn"]</label>

<table class="table table-bordered table-striped table-responsive table-hover ReestrTable">
    <tr>
        <th>
            @Ajax.ActionLink("ФИО персоны", "AllVisitsPartial", new
       {
           SortBy = ViewBag.SortPersonFIO,
           RoleSearchString = ViewData["RoleSearchString"],
           VisitorId = ViewData["VisitorId"],
           EventId = ViewData["EventId"],
           ExerciseId = ViewData["ExerciseId"],
           StartDate = ViewData["StartDate"],
           FilterMode = Request["FilterMode"]
       }, new AjaxOptions { HttpMethod = "Get", InsertionMode = InsertionMode.Replace, UpdateTargetId = "updateV", LoadingElementId = "loadingImg" }, new { @id = "PersonFIO" })
            <i id="PersonFIOArrow" class="glyphicon glyphicon-triangle-top" style="visibility:hidden"></i>
        </th>
        <th>
            @Ajax.ActionLink("Занятие", "AllVisitsPartial", new
       {
           SortBy = ViewBag.SortExName,
           RoleSearchString = ViewData["RoleSearchString"],
           VisitorId = ViewData["VisitorId"],
           EventId = ViewData["EventId"],
           ExerciseId = ViewData["ExerciseId"],
           StartDate = ViewData["StartDate"],
           FilterMode = Request["FilterMode"]
       }, new AjaxOptions { HttpMethod = "Get", InsertionMode = InsertionMode.Replace, UpdateTargetId = "updateV", LoadingElementId = "loadingImg" }, new { @id = "ExName" })
            <i id="ExNameArrow" class="glyphicon glyphicon-triangle-top" style="visibility:hidden"></i>
        </th>

        <th>
            @Ajax.ActionLink("Дата", "AllVisitsPartial", new
       {
           SortBy = ViewBag.SortStartTime,
           RoleSearchString = ViewData["RoleSearchString"],
           VisitorId = ViewData["VisitorId"],
           EventId = ViewData["EventId"],
           ExerciseId = ViewData["ExerciseId"],
           StartDate = ViewData["StartDate"],
           FilterMode = Request["FilterMode"]
       }, new AjaxOptions { HttpMethod = "Get", InsertionMode = InsertionMode.Replace, UpdateTargetId = "updateV", LoadingElementId = "loadingImg" }, new { @id = "StartTime" })
            <i id="StartTimeArrow" class="glyphicon glyphicon-triangle-top" style="visibility:hidden"></i>
        </th>

        <th>
            @Ajax.ActionLink("Мероприятие", "AllVisitsPartial", new
       {
           SortBy = ViewBag.SortEventName,
           RoleSearchString = ViewData["RoleSearchString"],
           VisitorId = ViewData["VisitorId"],
           EventId = ViewData["EventId"],
           ExerciseId = ViewData["ExerciseId"],
           StartDate = ViewData["StartDate"],
           FilterMode = Request["FilterMode"]
       }, new AjaxOptions { HttpMethod = "Get", InsertionMode = InsertionMode.Replace, UpdateTargetId = "updateV", LoadingElementId = "loadingImg" }, new { @id = "EventName" })
            <i id="EventNameArrow" class="glyphicon glyphicon-triangle-top" style="visibility:hidden"></i>
        </th>

        <th>
            @Ajax.ActionLink("Роль", "AllVisitsPartial", new
       {
           SortBy = ViewBag.SortRoleName,
           RoleSearchString = ViewData["RoleSearchString"],
           VisitorId = ViewData["VisitorId"],
           EventId = ViewData["EventId"],
           ExerciseId = ViewData["ExerciseId"],
           StartDate = ViewData["StartDate"],
           FilterMode = Request["FilterMode"]
       }, new AjaxOptions { HttpMethod = "Get", InsertionMode = InsertionMode.Replace, UpdateTargetId = "updateV", LoadingElementId = "loadingImg" }, new { @id = "RoleName" })
            <i id="RoleNameArrow" class="glyphicon glyphicon-triangle-top" style="visibility:hidden"></i>
        </th>
        <th>Примечание</th>
        <th></th>
    </tr>

    @if (Model.Count() == 0)
    {
        <tr>
            <td colspan="7">
                <p class="text-center text-danger" style="margin-top:12px;">Записи, соответствующие критериям поиска, не найдены<p>
            </td>
        </tr>
    }
    @foreach (var item in Model)
    {
        var _class = string.Empty;
        if (!item.FactVisit)
        {
            _class = "red_tr";
        }
        <tr class="@_class">
            <td style="vertical-align:top !important;" data-fparam="person" data-personid="@item.VisitorId" data-personfio="@item.PersonFIO" class="autofilter">
                <a href="#topanchor" class="showRelPersons" data-personid="@item.VisitorId" title="Карточка персоны">@Html.DisplayFor(modelItem => item.PersonFIO)</a>
            </td>
            <td style="vertical-align:top !important" data-fparam="ex" data-exid="@item.ExerciseId" data-exname="@item.ExName" class="autofilter">
                @Html.ActionLink(@item.ExName, "ExShow", "Exercises", new { ExerciseId = @item.ExerciseId }, new { target = "_self" })
            </td>
            <td style="text-align:center; vertical-align:top !important" data-fparam="date" data-date="@Convert.ToDateTime(item.StartTime).ToString("dd'/'MM'/'yyyy")" class=" autofilter">
                @Html.DisplayFor(modelItem => item.StartTime)
            </td>
            <td style="max-width:100px; vertical-align:top !important" data-fparam="event" data-eventid="@item.EventId" data-eventname="@item.EventName" class="autofilter">
                @Html.ActionLink(@item.EventName, "ResShowOfEvent", "Reserves", new { EventId = @item.EventId }, new { target = "_self" })
            </td>
            <td style="vertical-align:top !important" data-fparam="role" data-roleid="@item.RoleId" class="autofilter">
                @Html.DisplayFor(modelItem => item.RoleName)
            </td>
            <td class="breakWord" style="max-width:300px; vertical-align:top !important; text-align:justify;">
                @Html.DisplayFor(modelItem => item.Note)
            </td>
            <td style="text-align:center; width:92px; min-width:92px; vertical-align:top !important">
                <a class="btn btn-default btn-sm" title="Редактировать" href='@Url.Action("VisEdit", "Visits", new { VisitId = item.VisitId })'><span class="glyphicon glyphicon-edit"></span></a>
                <a class="btn btn-default btn-sm" title="Удалить" href='@Url.Action("VisDelete", "Visits", new { VisitId = item.VisitId })'><span class="glyphicon glyphicon-trash"></span></a>
            </td>
        </tr>
    }

</table>

@if (Model.PageCount > 0)
{
    @:<hr />
    @:Страница @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) из @Model.PageCount.
    @:Записи @Model.FirstItemOnPage - @Model.LastItemOnPage из @Model.TotalItemCount


    @Html.PagedListPager(Model, page => Url.Action("AllVisitsPartial", "Visits",
                             new
                             {
                                 RoleSearchString = ViewData["RoleSearchString"],
                                 VisitorId = ViewData["VisitorId"],
                                 EventId = ViewData["EventId"],
                                 ExerciseId = ViewData["ExerciseId"],
                                 StartDate = ViewData["StartDate"],
                                 SortBy = Request["SortBy"],
                                 FilterMode = Request["FilterMode"],
                                 page
                             }),
                             PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new PagedListRenderOptions { Display = PagedListDisplayMode.IfNeeded },
                             new AjaxOptions() { HttpMethod = "GET", UpdateTargetId = "updateV" }))

}